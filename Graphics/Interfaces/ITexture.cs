using System;

namespace RobustEngine.Graphics.Interfaces
{
    public interface ITexture
    {
        /// <summary>
        /// Texture ID 
        /// </summary>
        /// <value></value>
        int ID {get;}

        /// <summary>
        /// Current Texture Slot In/To be used. 
        /// </summary>
        /// <value>From 0 to the maximum texture slots for your graphics driver</value>
        int Slot {get;}

        /// <summary>
        /// Max MipMap Levels Generated by GenerateMipMaps() 
        /// TODO SHOULD THSI BE HERE?
        /// </summary>
        /// <value></value>
        int MipMapLevels {get;}

        /// <summary>
        /// Bind Texture for use. Can Optionally specify which texture unit you want to bind to.
        /// </summary>
        /// <optional name="TextureUnit"> Specify which TextureUnit you want to bind to.</optional>
        void Bind(int Slot = 0);

        /// <summary>
        /// Load Pixel data into Texture Implementation
        /// </summary>
        /// <param name="pixeldata">pointer to your pixel data</param>
        /// <param name="w">width of pixel data </param>
        /// <param name="h">height of pixel data</param>
        void Create(int w, int h,IntPtr pixeldata,InternalFormat IF);

        /// <summary>
        /// Set the Texture Parameters for the currently bound texture unit
        /// </summary>
        /// <param name="TexParams">Texture Parameters to use</param>
        void SetTextureParams(TextureParams TexParams);

        /// <summary>
        /// Generates the MipMap Levels for the currently bound texture unit
        /// </summary>
        void GenerateMipMaps();

        /// <summary>
        /// Unbind Texture.   
        /// </summary>
        void Unbind();
        

    }

}